# libraries
import pandas as pd
import os
import gzip
import re # for regular expressions
import numpy as np
import json
from snakemake.utils import min_version

min_version("7.15.2")

SDIR = os.path.realpath(os.path.dirname(srcdir("Snakefile")))
shell.prefix(f"set -eo pipefail;")

module_name = "genome_tracks"

##### setup report #####
report: os.path.join("report", "workflow.rst")

##### set & load config and sample annotation sheets #####
configfile: os.path.join("config","config.yaml")

annot = pd.read_csv(config['sample_annotation'])
genes = pd.read_csv(config['gene_list'], names=['genes']).genes.to_list()
genome_size=config['genome_size']

# gtracks parameters
ymax = config['y_max']
xaxis = config['x_axis']
base_buffer = config['base_buffer']
width = config['width']

##### load rules #####
include: os.path.join("rules", "common.smk")
include: os.path.join("rules", "envs_export.smk")
include: os.path.join("rules", "prepare.smk")
include: os.path.join("rules", "visualization.smk")

############### FOR TESTING only 10 samples ##################
# annot = annot.iloc[-10:,]
# genes = genes[:2]

COORD_REGEX = re.compile('chr[0-9XY]+:[0-9]+-[0-9]+$')

# find gtrack parameters for each gene and handle exception when gene is not found
gene_annot_list = []
remove_genes = []
for gene in genes:
    if COORD_REGEX.match(gene):
        gene_annot_list.append(parse_region(gene))
    else:
        tmp_val = parse_gene(gene)
        if tmp_val==-1:
            # drop gene, because not found
            remove_genes.append(gene)
        else:
            gene_annot_list.append(tmp_val)
        
if len(remove_genes)>0:
    pd.DataFrame(remove_genes).to_csv(os.path.join(config["result_path"],'genes_not_found.csv'), index=False, header=False)
    genes = [gene for gene in genes if gene not in remove_genes]

genes = [gene.replace(':', '-') for gene in genes]
gene_annot_df = pd.DataFrame(gene_annot_list, columns=['chr', 'start', 'end', 'count'], index=genes)

##### target rule #####
rule all:
    input:
        genome_tracks = expand(os.path.join(config["result_path"], module_name, 'tracks', '{category}_{gene}.svg'), category=annot['category'].unique(), gene=genes),
        genome_tracks_all = expand(os.path.join(config["result_path"], module_name, 'tracks', 'ALL_{gene}.svg'), gene=genes),
        envs = expand(os.path.join(config["result_path"],'envs', module_name,'{env}.yaml'),env=['pygenometracks']),
        gene_list = os.path.join(config["result_path"],'configs', module_name,'gene_list.txt'),
        configs = os.path.join(config["result_path"],'configs', module_name,'{}_config.yaml'.format(config["project_name"])),
        annotations = os.path.join(config["result_path"],'configs', module_name,'{}_annot.csv'.format(config["project_name"])),
    params:
        # cluster parameters
        partition = config.get("partition"),
    resources:
        mem_mb=config.get("mem", "4000"),
    threads: config.get("threads", 1)
    log:
        os.path.join("logs","rules","all.log")
